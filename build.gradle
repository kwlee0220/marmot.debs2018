apply plugin: 'java'
apply plugin: 'maven'

group = 'etri'
version = '0.1'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://download.osgeo.org/webdav/geotools/"
	}
    mavenCentral()
}

dependencies {
	compile project(':marmot')
	compile project(':debs2018.gridcell')
	
	compile group: 'org.apache.activemq', name: 'activemq-client', version: '5.14.1'
	compile group: 'com.github.davidmoten', name: 'geo', version: '0.7.4'
	compile group: 'de.ruedigermoeller', name: 'fst', version: '2.56'
	compile group: 'com.esotericsoftware', name: 'kryo', version: '4.0.0'
	compile "io.reactivex.rxjava2:rxjava:2.1.8"
	
}


buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
	}
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.charSet = 'UTF-8'
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}